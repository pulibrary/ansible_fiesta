---
- name: Search_app | check existing ruby version
  ansible.builtin.shell: ruby -v | awk "{print $2}"
  register: installed_ruby
  changed_when: false

- name: Search_app | output existing ruby version
  ansible.builtin.debug:
    msg: Installed ruby {{ installed_ruby.stdout }} Desired ruby {{ ruby_version }}

- name: Search_app | lookup download path and checksum from ruby-lang release index
  ansible.builtin.shell: curl https://cache.ruby-lang.org/pub/ruby/index.txt | grep {{ ruby_version }}.tar.gz
  register: ruby_index_line

- name: Search_app | separate index entry values
  ansible.builtin.set_fact:
    ruby_values: "{{ ruby_index_line.stdout | regex_findall('(\\S+)') }}"

- name: Search_app | get ruby url
  ansible.builtin.set_fact:
    ruby_gzip_url: "{{ ruby_values[1] }}"

- name: Search_app | get ruby checksum
  ansible.builtin.set_fact:
    ruby_sha_256: "{{ ruby_values[3] }}"

- name: Search_app | ensure install path exists
  ansible.builtin.file:
    path: "{{ install_path }}"
    state: directory
    mode: "0644"

# the next two tasks find and uninstall previous ruby versions
# installed from source, to allow upgrading/downgrading from one
# ruby version installed from source to another
- name: Search_app | look for ruby installed from source
  ansible.builtin.find:
    paths: "{{ install_path }}"
    file_type: directory
    patterns: "^ruby"
    use_regex: true
  register: source_rubies

- name: Search_app | uninstall any ruby installed from source
  ansible.builtin.shell: cd {{ item.path }} && make uninstall
  loop: "{{ source_rubies.files }}"
  when: source_rubies.matched > 0

- name: Search_app | download ruby
  ansible.builtin.get_url:
    url: "{{ ruby_gzip_url }}"
    checksum: "sha256:{{ ruby_sha_256 }}"
    dest: "{{ install_path }}/{{ ruby_version }}.tar.gz"
    mode: "0644"

- name: Search_app | unzip ruby file
  ansible.builtin.unarchive:
    src: "{{ install_path }}/{{ ruby_version }}.tar.gz"
    dest: "{{ install_path }}/"
    creates: "{{ install_path }}/{{ ruby_version }}/compile.c"
    copy: false

- name: Search_app | configure ruby
  ansible.builtin.shell: cd {{ install_path }}/{{ ruby_version }} && ./configure --enable-shared

- name: Search_app | make ruby
  ansible.builtin.shell: cd {{ install_path }}/{{ ruby_version }} && make

- name: Search_app | install ruby
  ansible.builtin.shell: cd {{ install_path }}/{{ ruby_version }} && make install
  become: true
